# Tmux configuration
# Greatly inspired from :
#   - https://github.com/gpakosz/.tmux
#   - https://github.com/samoshkin/tmux-config

# General TMUX configuration
set -g default-terminal "screen-256color"
# Faster escape sequencse
set -g escape-time 100
# Maximum number of lines held in window history.
set -g history-limit 100000
# Duration of notification on status bar
set -g display-time 5000
# Keep pane if command run in it exit non zero, usefull for pane run server when
# developping applications for instance.
set -g remain-on-exit off
# Does not allow prorgram in pane to rename pane, done programmatically
setw -g allow-rename off
# Disallow globally automatic pane renaming, done programmatically
setw -g automatic-rename off
# Aggressively resize the chosen window.
setw -g aggressive-resize on
# Allow to set the client terminal title.
set -g set-titles on
# String used to set the client terminal title if set-titles is on.
set -g set-titles-string "#S:#W"
# Start index of window/pane with 1, because we"re humans, not computers
set -g base-index 1
setw -g pane-base-index 1
# Automatic renumber window on close
set -g renumber-windows on
# Interval between status line update
set -g status-interval 5
# Do not bound mouse event as key
set -g mouse off
# Only show a message when event occurs in a window (no bell)
set -g visual-activity on
# Allowing xterm sequence such as Ctrl+Left-Arrow behave differently from just
# Left-Arrow
setw -g xterm-keys on
# Set Alt-a (Meta-a) as the secondary prefix making C-b and M-a equivalent.
set -g prefix2 M-a

# Set default color of active and inactive windows/pane
set -g window-style "fg=#999999,bg=default"
set -g window-active-style "fg=#FFFFFF,bg=default"
set -g pane-border-lines double
set -g pane-border-status top
set -g pane-border-style "fg=#999999,bg=default"
set -g pane-active-border-style "fg=#00FF00,bg=default"
set -g pane-border-indicators both
# Generally, this configuration is overriden by custom per host configuration,
# see the end of this file.

# Key Unbindings
# =============================================================================
# Unbind default key bindings, we"re going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind "}"  # swap-pane -D
unbind "{"  # swap-pane -U
unbind "["  # copy-moda
unbind "]"  # paste-buffer -P
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left

# New Key Bindings
# =============================================================================
# bind -n = bind to root, i.e. wihout use of prefix
# bind -r = bind can bea repeatable

# Reload tmux configuration
bind -n M-r source-file ~/.config/tmux/tmux.conf # \; display "Config reloaded"

# New window and retain cwd
bind c new-window -c "#{pane_current_path}" -n " "
bind -n -r M-c new-window -c "#{pane_current_path}" -n " "
bind -n -r M-t new-window -c "#{pane_current_path}" -n " "

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window "%%""
bind R command-prompt -I "#{session_name}" "rename-session "%%""

# Split panes
# Warning !!! Vertical/Horizontal shortcuts are inversed. My inner logic is
# based from the orientation of the split line (i.e. when splitting vertically,
# the split line is horizontal and vice-versa).
bind v split-window -h -c "#{pane_current_path}"
bind h split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -n -r M-l next-window
bind -n -r M-h previous-window
bind -n -r M-k swap-pane -U
bind -n -r M-j swap-pane -D

# Pane resize and zoom
bind -n -r C-M-L resize-pane -R 5
bind -n -r C-M-H resize-pane -L 5
bind -n -r C-M-J resize-pane -D 5
bind -n -r C-M-K resize-pane -U 5
bind -n -r C-M-Z resize-pane -Z

# Kill pane/window/session shortcuts
bind -n M-x confirm-before -p "Kill pane #P? (y/n)" "kill-pane"
bind -n M-w confirm-before -p "Kill windows #W? (y/n)" "kill-window"
bind -n M-q confirm-before -p "Kill session #S? (y/n)" "kill-session"

# Detach from session
bind d detach
bind D if -F "#{session_many_attached}" \
  "confirm-before -p 'Detach other clients? (y/n)' 'detach -a'" \
  "detach"

# Window monitoring for activity and silence
# =============================================================================
# Focus events are requested from the terminal
set focus-events on
# Monitor for activity in the window.
set -g monitor-activity off
# C-b + m : Toggle Monitor Activity
bind m setw monitor-activity \; \
  display "Monitor window activity [#{?monitor-activity,ON,OFF}]"

# Monitor for silence (no activity) in the window within interval seconds.
set -g monitor-silence 0
# C-b + M : Toggle Activity is pane is silence for X seconds
bind M if -F "#{monitor-silence}" \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Copy mode, history, scroll and clipboard
# =============================================================================
set -g @copy_use_osc52_fallback on
# Use vi style key bindings in copy mode.
set -g mode-keys vi

# Trigger copy-mode
bind -n M-Escape copy-mode
# Past buffer
bind -n M-v paste-buffer
bind -n M-p choose-buffer

# When scrolling with mouse wheel, scrolled by 1 rows per tick
# (Fact is I don"t almost never use a mouse)
bind -T copy-mode-vi WheelUpPane    select-pane \; send-keys -X -N 1 scroll-up
bind -T copy-mode-vi WheelDownPane  select-pane \; send-keys -X -N 1 scroll-down

# Copy mode and test selection
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi V send-keys -X rectangle-toggle
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel
bind -T copy-mode-vi Y send-keys -X copy-line

set-environment -g TMUX_PLUGIN_MANAGER_PATH "~/.cache/tmux/plugins"
# Plugins
# =============================================================================
# TPM
# -----------------------------------------------------------------------------
if "test ! -d ~/.cache/tmux/plugins/tpm" {
   run "git clone https://github.com/tmux-plugins/tpm ~/.cache/tmux/plugins/tpm && ~/.cache/tmux/plugins/tpm/bin/install_plugins"
}

# Tmux Plugin Manager
set -g @plugin "tmux-plugins/tpm"

# Vim Tmux Navigator
# -----------------------------------------------------------------------------
# Seamless navigation between tmux panes and vim splits
set -g @plugin "christoomey/vim-tmux-navigator"

# Tmux FZF Url
# -----------------------------------------------------------------------------
# Quickly open urls on your terminal screen!
set -g @plugin "wfxr/tmux-fzf-url"

# Tmux FZF Session Switch
# -----------------------------------------------------------------------------
# Easy way to switch, when you have a ton of sessions.
set -g @plugin "thuantanphamfilms/tmux-fzf-session-switch"

# Search session only
set -g @fzf-goto-session-only "true"
# Key binding
set -g @fzf-goto-session-without-prefix "true"
set -g @fzf-goto-session "M-s"
set -g @fzf-goto-win-width 80
set -g @fzf-goto-win-height 20

# Tmux Fuzzback
# Search your tmux scrollback buffer using fuzzy matching
# -----------------------------------------------------------------------------
set -g @plugin "roosta/tmux-fuzzback"

# To bind without prefix : https://github.com/roosta/tmux-fuzzback/issues/4
set -g @fuzzback-table "root"
set -g @fuzzback-bind "M-g"
set -g @fuzzback-popup 1
set -g @fuzzback-popup-size "90%"

# Tmux Open Nvim
# A tmux plugin that helps opening files in a Neovim pane
# -----------------------------------------------------------------------------
set -g @plugin "trevarj/tmux-open-nvim"
if "test ! -e ~/.local/bin/ton" {
  run "ln -s ~/.cache/tmux/plugins/tmux-open-nvim/scripts/ton ~/.local/bin/ton"
}

# Tmux Fingers
# Copy pasting in terminal with vimium/vimperator like hints.
# -----------------------------------------------------------------------------
set -g @plugin 'fcsonline/tmux-thumbs'
run-shell ~/.cache/tmux/plugins/tmux-thumbs/tmux-thumbs.tmux
# set -g @thumbs-key f
bind -n M-f thumbs-pick

# Run plugins script
# =============================================================================
# Load custom share config per host/user configuration
if "test -f ~/.local/share/tmux/config.sh" {
  run "~/.local/share/tmux/config.sh"
}

run "~/.cache/tmux/plugins/tpm/tpm"
# vim: ft=tmux: fdm=indent
